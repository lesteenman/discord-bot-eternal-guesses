name: main

on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: NPM install for Serverless
        run: npm install

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v4

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install discord_app Poetry
        run: cd discord_app && poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install infra Poetry
        run: cd infra && poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Verify code quality
        run: cd discord_app && poetry run flake8 --config ../.flake8 ./tests ./eternal_guesses ../error_parser_function ../infra

      - name: Test with pytest
        run: cd discord_app && poetry run pytest --cov=eternal_guesses --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: discord_app/coverage.xml
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true

      - name: Package discord_app
        run: cd discord_app/ && npx serverless package && cd ../

      - name: Upload the discord_app package
        uses: actions/upload-artifact@v2
        with:
          name: discord-app-package
          path: discord_app/.serverless/discord-app.zip

      - name: Package error_parser_function
        run: cd error_parser_function/ && npx serverless package && cd ../

      - name: Upload the error_parser package
        uses: actions/upload-artifact@v2
        with:
          name: error-parser-package
          path: error_parser_function/.serverless/error-parser.zip

  # Zip the packages and infra
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Download the discord_app package
        uses: actions/download-artifact@v2
        with:
          name: discord-app-package

      - name: Download the error_parser package
        uses: actions/download-artifact@v2
        with:
          name: error-parser-package

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate a release name
        id: release_name
        run: echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%S%z")"

      - name: Create Release
        uses: actions/create-release@v1
        with:
          commitish: ${{ github.sha }}
          release_name: ${{ steps.release_name.outputs.date }}
          body: ${{steps.github_release.outputs.changelog}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
